{"version":3,"sources":["features/UserSider/styles.module.scss","features/TaskContent/styles.module.scss","styles.module.scss","components/Layout/index.tsx","app/hooks.ts","DataBase.ts","app/appSlice.ts","app/asyncActions.ts","components/Input/index.tsx","components/Button/index.tsx","features/FormTask/index.tsx","features/AddTask/index.tsx","components/Modal/index.tsx","features/DeleteButton/index.tsx","features/TaskContent/index.tsx","components/Menu/index.tsx","features/UserSider/index.tsx","features/UpdateTask/index.tsx","app/headerSlice.ts","features/UserHeader/index.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","features/FormTask/styles.module.scss","features/UserHeader/styles.module.scss"],"names":["module","exports","Layout","props","Header","LayoutAntd","Content","Footer","Sider","useAppDispatch","useDispatch","useAppSelector","useSelector","db","Dexie","version","stores","tasks","appSlice","createSlice","name","initialState","status","reducers","addTask","state","action","payload","loadTasks","deleteTask","filter","elem","id","updateTask","updatedArray","map","actions","addTaskAsync","createAsyncThunk","task","thunkAPI","a","table","add","dispatch","console","log","loadTaskAsync","_","toArray","datas","deleteTaskAsync","delete","updateTaskAsync","other","update","Input","Search","InputAntd","TextArea","Button","styles","color","fontSize","FormTask","changeDbFunction","title","head","inform","validSchema","yup","shape","required","description","formik","useFormik","initialValues","validateOnBlur","validationSchema","onSubmit","values","nameCx","classNames","errors","touched","descCx","className","classes","form","handleSubmit","htmlFor","placeholder","getFieldProps","style","autoSize","minRows","type","htmlType","onClick","resetForm","AddTask","history","useHistory","taskIndex","nanoid","push","Modal","DeleteButton","useState","isModalVisible","setModalVisible","index","useParams","danger","visible","onOk","onCancel","TaskContent","text","setTitle","content","setContent","store","value","headerSlice","currTask","useEffect","newDesc","split","replace","join","to","dangerouslySetInnerHTML","__html","Menu","Item","MenuAntd","UserSider","theme","menu","icon","PlusCircleOutlined","link","FormOutlined","UpdateTask","singleTask","changeValue","UserHeader","header","onSearch","allowClear","App","container","path","component","exact","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","response","counterSlice","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","configureStore","reducer","appSliceReducer","headerSliceReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb3f2a68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"styles_menu__16Mxx\",\"link\":\"styles_link__3qNSY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"styles_content__3oCXF\",\"text-header\":\"styles_text-header__1KwVW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__35dEc\"};","import React, { FC } from 'react'\r\nimport { Layout as LayoutAntd } from 'antd'\r\nimport { LayoutProps as LayoutAntdProps } from 'antd/lib/layout'\r\n\r\nexport interface Props extends LayoutAntdProps { }\r\n\r\nconst Layout: Component = ({ ...props }) => {\r\n    return <LayoutAntd {...props} />\r\n}\r\n\r\nLayout.Header = LayoutAntd.Header\r\nLayout.Content = LayoutAntd.Content\r\nLayout.Footer = LayoutAntd.Footer\r\nLayout.Sider = LayoutAntd.Sider\r\n\r\ninterface Component extends FC<Props> {\r\n    Header: typeof LayoutAntd.Header;\r\n    Content: typeof LayoutAntd.Content;\r\n    Footer: typeof LayoutAntd.Footer;\r\n    Sider: typeof LayoutAntd.Sider;\r\n\r\n}\r\n\r\nexport default Layout","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('tasksDb');\r\ndb.version(1).stores({\r\n    tasks: `++id, name, description`\r\n});\r\n\r\nexport default db;","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from './store';\r\nimport { loadTaskAsync } from './asyncActions'\r\n //import db from '../DataBase'\r\n\r\nexport interface SingleTask {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\nexport interface AppState {\r\n  tasks: SingleTask[];\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: AppState = {\r\n    tasks: [],\r\n    status: 'idle',\r\n};\r\n\r\n// export const addTaskAsync = createAsyncThunk(\r\n//   'app/addTaskAsync',\r\n//   async (task: SingleTask, thunkAPI) => {\r\n//     try {\r\n//         await db.table('tasks').add(task)\r\n//         console.log(task)\r\n//         return task\r\n//     } catch (err) {\r\n//         console.log(err)\r\n//     }\r\n    \r\n//     // const response = await fetch('http://vk.com');\r\n//     // // The value we return becomes the `fulfilled` action payload\r\n//     // return response;\r\n//   }\r\n// );\r\n\r\n// export const loadTaskAsync = createAsyncThunk(\r\n//     'app/loadTaskAsync',\r\n//     async () => {\r\n//       try {\r\n//           const datas = await db.table('tasks').toArray()\r\n\r\n//           return datas\r\n//       } catch (err) {\r\n//           console.log(err)\r\n//       }\r\n      \r\n//       // const response = await fetch('http://vk.com');\r\n//       // // The value we return becomes the `fulfilled` action payload\r\n//       // return response;\r\n//     }\r\n//   );\r\n\r\n//   export const deleteTaskAsync = createAsyncThunk(\r\n//     'app/deleteTaskAsync',\r\n//     async (id: number, thunkAPI) => {\r\n//       try {\r\n//           await db.table('tasks').delete(id)\r\n//           return id\r\n//       } catch (err) {\r\n//           console.log(err)\r\n//       }\r\n      \r\n//       // const response = await fetch('http://vk.com');\r\n//       // // The value we return becomes the `fulfilled` action payload\r\n//       // return response;\r\n//     }\r\n//   );\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n        state.tasks = [...state.tasks, action.payload]\r\n    },\r\n    loadTasks: (state, action) => {\r\n        state.tasks = action.payload\r\n    },\r\n    deleteTask: (state, action) => {\r\n      state.tasks = state.tasks.filter(elem => elem.id != action.payload)\r\n    },\r\n    updateTask: (state, action) => {\r\n        const updatedArray = state.tasks.map(elem => {\r\n          if (elem.id === action.payload.id) return action.payload\r\n          return elem\r\n        })\r\n        state.tasks = updatedArray\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: (builder) => {\r\n  //   builder\r\n  //     .addCase(addTaskAsync.pending, (state) => {\r\n  //       // state.status = 'loading';\r\n  //       console.log('pendding')\r\n  //     })\r\n  //     .addCase(addTaskAsync.fulfilled, (state, action) => {\r\n  //       console.log(action)\r\n  //       console.log('addTaskAsync fulfilled')\r\n  //       //state.status = 'idle';\r\n  //       //state.value += action.payload;\r\n  //     })\r\n      // .addCase(loadTaskAsync.pending, (state) => {\r\n      //   state.status = 'loading'\r\n      // })\r\n      // .addCase(loadTaskAsync.fulfilled, (state, action) => {\r\n      //   state.status = 'idle'\r\n      // })\r\n  //     .addCase(deleteTaskAsync.pending, (state) => {\r\n  //       console.log('deleteTaskAsync pending')\r\n  //     })\r\n  //     .addCase(deleteTaskAsync.fulfilled, (state, action) => {\r\n  //       console.log(action)\r\n  //       console.log('deleteTaskAsync fulfilled')\r\n  //     })\r\n  //},\r\n});\r\n\r\nexport const { addTask, loadTasks, deleteTask, updateTask } = appSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\n//export const selectCount = (state: RootState) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\n\r\n// export const incrementIfOdd = (amount: number): AppThunk => (\r\n//   dispatch,\r\n//   getState\r\n// ) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default appSlice.reducer;\r\n","import { createAsyncThunk, /*isAsyncThunkAction*/ } from '@reduxjs/toolkit';\r\nimport { SingleTask } from './appSlice'\r\nimport db from '../DataBase'\r\nimport { addTask, loadTasks, deleteTask, updateTask } from './appSlice'\r\n\r\nexport const addTaskAsync = createAsyncThunk(\r\n    'app/addTaskAsync',\r\n    async (task: SingleTask, thunkAPI) => {\r\n      try {\r\n          await db.table('tasks').add(task)\r\n          thunkAPI.dispatch(addTask(task))\r\n      } catch (err) {\r\n          console.log(err)\r\n      }\r\n    }\r\n);\r\n\r\nexport const loadTaskAsync = createAsyncThunk(\r\n    'app/loadTaskAsync',\r\n    async (_, thunkAPI) => {\r\n      try {\r\n          const datas = await db.table('tasks').toArray()\r\n          thunkAPI.dispatch(loadTasks(datas))\r\n      } catch (err) {\r\n          console.log(err)\r\n      }\r\n    }\r\n);\r\n\r\nexport const deleteTaskAsync = createAsyncThunk(\r\n    'app/deleteTaskAsync',\r\n    async (id: string, thunkAPI) => {\r\n      try {\r\n          console.log(id)\r\n          await db.table('tasks').delete(id)\r\n          thunkAPI.dispatch(deleteTask(id))\r\n      } catch (err) {\r\n          console.log(err)\r\n      }\r\n    }\r\n);\r\n\r\nexport const updateTaskAsync = createAsyncThunk(\r\n    'app/updateTaskAsync',\r\n    async (task: SingleTask, thunkAPI) => {\r\n      try {\r\n          const {id, ...other} = task\r\n          await db.table('tasks').update(id, other)\r\n          thunkAPI.dispatch(updateTask(task))\r\n      } catch (err) {\r\n          console.log(err)\r\n      }\r\n    }\r\n);","import React, { FC } from 'react'\r\nimport { Input as InputAntd } from 'antd'\r\nimport { InputProps as InputAntdProps } from 'antd/lib/input'\r\n\r\nexport interface Props extends InputAntdProps { }\r\n\r\nconst Input: Component = ({ ...props }) => {\r\n    return <InputAntd {...props} />\r\n}\r\n\r\nInput.Search = InputAntd.Search\r\nInput.TextArea = InputAntd.TextArea\r\n\r\ninterface Component extends FC<Props> {\r\n    Search: typeof InputAntd.Search;\r\n    TextArea: typeof InputAntd.TextArea\r\n}\r\n\r\nexport default Input\r\n","import React, { FC } from 'react'\r\nimport { Button as ButtonAntd } from 'antd'\r\nimport { ButtonProps as ButtonAntdProps } from 'antd/lib/button'\r\n\r\nexport interface Props extends ButtonAntdProps { }\r\n\r\nconst Button: FC<Props> = ({ ...props }) => {\r\n    return <ButtonAntd {...props} />\r\n}\r\n\r\nexport default Button","import React, { FC } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Input from '../../components/Input'\r\nimport * as yup from 'yup'\r\nimport classNames from 'classnames'\r\nimport classes from './styles.module.scss'\r\nimport Button from '../../components/Button'\r\n\r\nconst styles = {\r\n    color: 'tomato',\r\n    fontSize: '12px',\r\n}\r\n\r\ninterface Props {\r\n    changeDbFunction: Function;\r\n    title: string;\r\n    inform: string;\r\n    head: string;\r\n}\r\n\r\nexport const FormTask: FC<Props> = ({ changeDbFunction, title, head, inform }) => {\r\n    const validSchema = yup.object().shape({\r\n        name: yup.string().required('Name is required'),\r\n        description: yup.string().required('Description is required'),\r\n    })\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: head,\r\n            description: inform,\r\n        },\r\n        validateOnBlur: true,\r\n        validationSchema: validSchema,\r\n        onSubmit: values => {\r\n            changeDbFunction(values)\r\n        },\r\n    });\r\n\r\n    const nameCx = classNames({\r\n        'input-error': formik.errors.name && formik.touched.name,\r\n        '': !formik.errors.name || !formik.touched.name,\r\n    })\r\n    const descCx = classNames({\r\n        'input-error': formik.errors.description && formik.touched.description,\r\n        '': !formik.errors.description || !formik.touched.description,\r\n    })\r\n\r\n    return (\r\n        <form className={classes.form} onSubmit={formik.handleSubmit}>\r\n            <h3 className={classes['form-header']}>{title}</h3>\r\n            <label htmlFor=\"name\">Title\r\n                <Input\r\n                    className={classes[nameCx]}\r\n                    id=\"name\"\r\n                    placeholder=\"Type name\"\r\n                    {...formik.getFieldProps('name')}\r\n                />\r\n            </label>\r\n            {(formik.touched.name && formik.errors.name)\r\n                && <div style={styles}>{formik.errors.name}</div>}\r\n            <label htmlFor=\"desc\">Description\r\n                <Input.TextArea\r\n                    className={classes[descCx]}\r\n                    id=\"desc\"\r\n                    placeholder=\"Type description\"\r\n                    {...formik.getFieldProps('description')}\r\n                    autoSize={{ minRows: 10 }}\r\n                />\r\n            </label>\r\n            {(formik.touched.description && formik.errors.description)\r\n                && <div style={styles}>{formik.errors.description}</div>}\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n            </Button>\r\n            <Button\r\n                type=\"default\"\r\n                onClick={() => formik.resetForm()}\r\n            >\r\n                Clear\r\n            </Button>\r\n        </form>\r\n    );\r\n};","import React, { FC } from 'react'\r\nimport TaskForm from '../TaskForm'\r\nimport { useAppDispatch } from '../../app/hooks'\r\nimport { nanoid } from 'nanoid'\r\nimport { addTaskAsync } from '../../app/asyncActions'\r\nimport { FormTask } from '../FormTask'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\ninterface Props { }\r\n\r\nconst AddTask: FC<Props> = () => {\r\n    const dispatch = useAppDispatch()\r\n    const history = useHistory()\r\n\r\n    const addNewTask = (values: { name: string; description: string }) => {\r\n        const taskIndex = nanoid(8)\r\n        const task = { ...values, id: taskIndex }\r\n        dispatch(addTaskAsync(task))\r\n        history.push(`/task/${taskIndex}`)\r\n    }\r\n\r\n    return (\r\n        <FormTask\r\n            changeDbFunction={addNewTask}\r\n            title=\"Создать новую заметку\"\r\n            head=\"\"\r\n            inform=\"\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import React, { FC } from 'react'\r\nimport { Modal as ModalAntd } from 'antd'\r\nimport { ModalProps as ModalAntdProps } from 'antd/lib/modal'\r\n\r\nexport interface Props extends ModalAntdProps { }\r\n\r\nconst Modal: FC<Props> = ({ ...props }) => {\r\n    return <ModalAntd {...props} />\r\n}\r\n\r\nexport default Modal","import Reactm, { FC, useState } from 'react'\r\nimport Modal from '../../components/Modal'\r\nimport Button from '../../components/Button'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { deleteTaskAsync } from '../../app/asyncActions'\r\nimport { useAppDispatch } from '../../app/hooks'\r\n\r\ninterface Props { }\r\ninterface Index { id: string }\r\n\r\nconst DeleteButton: FC<Props> = () => {\r\n    const [isModalVisible, setModalVisible] = useState<boolean>(false)\r\n    // need to delete Element from Dexie DB\r\n    const index: Index = useParams()\r\n    const dispatch = useAppDispatch()\r\n    const history = useHistory()\r\n\r\n    const handleOk = (): void => {\r\n        dispatch(deleteTaskAsync(index.id))\r\n        setModalVisible(false)\r\n        history.push('/')\r\n    }\r\n\r\n    const handleCancel = (): void => {\r\n        setModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button danger onClick={() => setModalVisible(true)}>\r\n                Delite\r\n            </Button>\r\n            <Modal\r\n                title=\"Do you want to delete this task?\"\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeleteButton\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport Button from '../../components/Button'\r\nimport classes from './styles.module.scss'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { useAppSelector } from '../../app/hooks'\r\nimport { SingleTask } from '../../app/appSlice'\r\nimport DeleteButton from '../DeleteButton'\r\nimport marked from 'marked'\r\nimport { ControlledUsage } from '../MarkDownRedactor'\r\n\r\ninterface Props { }\r\n\r\ninterface Index {\r\n    id: string;\r\n}\r\n\r\nconst TaskContent: FC<Props> = () => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [content, setContent] = useState<string>('')\r\n    const tasks: SingleTask[] = useAppSelector(store => store.appSlice.tasks)\r\n    const value: string = useAppSelector(store => store.headerSlice.value)\r\n    const index: Index = useParams()\r\n    const [currTask] = tasks.filter(task => task.id === index.id)\r\n\r\n    useEffect(() => {\r\n        if (!value) {\r\n            setTitle(currTask?.name)\r\n            setContent(currTask?.description)\r\n            return\r\n        }\r\n        const array = currTask?.description.split(' ')\r\n        const newDesc = array.map(elem => {\r\n            //const markedElem = <span className={classes.marked}>{value}</span>\r\n            return elem.replace(value, `<mark>${value}</mark>`)\r\n        })\r\n        setContent(newDesc.join(' '))\r\n        // console.log(value)\r\n        // console.log(array)\r\n    }, [value, currTask])\r\n\r\n    function createMarkup(text: string) {\r\n        return { __html: text };\r\n    }\r\n\r\n    return (\r\n        <section className={classes.content}>\r\n            <header>\r\n                <Button type=\"primary\">\r\n                    <Link to=\"edit-task\">Edit</Link>\r\n                </Button>\r\n                <DeleteButton />\r\n            </header>\r\n            <article>\r\n                <h3 className={classes['text-header']}>{title}</h3>\r\n                {/* <ControlledUsage /> */}\r\n                <p dangerouslySetInnerHTML={createMarkup(content)} />\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TaskContent\r\n","import React, { FC } from 'react'\r\nimport { Menu as MenuAntd } from 'antd'\r\nimport { MenuProps as MenuAntdProps } from 'antd/lib/menu'\r\n\r\nexport interface Props extends MenuAntdProps { }\r\n\r\nconst Menu: Component = ({ ...props }) => {\r\n    return <MenuAntd {...props} />\r\n}\r\n\r\nMenu.Item = MenuAntd.Item\r\n\r\ninterface Component extends FC<Props> {\r\n    Item: typeof MenuAntd.Item\r\n}\r\n\r\nexport default Menu","import React, { FC } from 'react'\r\nimport Layout from '../../components/Layout'\r\nimport Menu from '../../components/Menu'\r\nimport { FormOutlined, PlusCircleOutlined } from '@ant-design/icons'\r\nimport { Link } from 'react-router-dom'\r\nimport classes from './styles.module.scss'\r\nimport { useAppSelector } from '../../app/hooks'\r\nimport { AppState, SingleTask } from '../../app/appSlice'\r\nconst { Sider } = Layout;\r\n\r\ninterface Props { }\r\n\r\nconst UserSider: FC<Props> = () => {\r\n    const store: AppState = useAppSelector(store => store.appSlice)\r\n    const { tasks, status } = store\r\n    //console.log(tasks)\r\n    return (\r\n        <Sider theme=\"dark\">\r\n            <Menu className={classes.menu}>\r\n                <Menu.Item\r\n                    // onClick={() => dispatch(addTaskAsync(todoToAdd))}\r\n                    key=\"1\"\r\n                    icon={<PlusCircleOutlined />}>\r\n                    <Link className={classes.link} to=\"/create-task\">Create new task</Link>\r\n                </Menu.Item>\r\n                {\r\n                    tasks.map((task: SingleTask) => {\r\n                        const { id, name } = task\r\n                        return <Menu.Item key={id}\r\n                            id={id}\r\n                            icon={<FormOutlined />}\r\n                        >\r\n                            <Link\r\n                                className={classes.link}\r\n                                to={`/task/${id}/`}>\r\n                                {name}\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    })\r\n                }\r\n            </Menu>\r\n        </Sider>\r\n    )\r\n}\r\n\r\nexport default UserSider\r\n\r\n\r\n{/* <Menu.Item key=\"2\"\r\nicon={<FormOutlined />}\r\n>\r\n<Link className={classes.link} to=\"/task/\"> First task</Link>\r\n</Menu.Item>\r\n<Menu.Item key=\"3\" icon={<FormOutlined />}>\r\nSecond task\r\n</Menu.Item>\r\n<Menu.Item key=\"4\" icon={<FormOutlined />}>\r\nThird task\r\n</Menu.Item> */}","import React, { FC } from 'react'\r\nimport { FormTask } from '../FormTask'\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\r\nimport { updateTaskAsync } from '../../app/asyncActions'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\n\r\ninterface Props { }\r\n\r\ninterface Index {\r\n    id: string;\r\n}\r\n\r\nconst UpdateTask: FC<Props> = () => {\r\n    const history = useHistory()\r\n    const dispatch = useAppDispatch()\r\n    const index: Index = useParams()\r\n    const { tasks } = useAppSelector(store => store.appSlice)\r\n    const [singleTask] = tasks.filter(task => task.id === index.id)\r\n\r\n    const updateTask = (values: { name: string; description: string }) => {\r\n        const task = { ...values, id: index.id }\r\n        dispatch(updateTaskAsync(task))\r\n        history.push(`/task/${index.id}`)\r\n    }\r\n\r\n    return (\r\n        <FormTask\r\n            changeDbFunction={updateTask}\r\n            title=\"Редактировать заметку\"\r\n            head={singleTask.name}\r\n            inform={singleTask.description}\r\n        />\r\n    )\r\n}\r\n\r\nexport default UpdateTask\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Search {\r\n    value: string;\r\n}\r\n\r\nconst initialState: Search = {\r\n    value: '',\r\n}\r\n\r\nexport const headerSlice = createSlice({\r\n    name: 'header',\r\n    initialState,\r\n    reducers: {\r\n        changeValue: (state, action) => {\r\n            //console.log(state.value)\r\n            state.value = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const { changeValue } = headerSlice.actions;\r\n\r\nexport default headerSlice.reducer","import React, { FC } from 'react'\r\nimport classes from './styles.module.scss'\r\nimport Input from '../../components/Input'\r\nimport Layout from '../../components/Layout'\r\nimport { Link } from 'react-router-dom'\r\nimport { changeValue } from '../../app/headerSlice'\r\nimport { useAppDispatch } from '../../app/hooks'\r\nconst { Header } = Layout\r\n\r\ninterface Props { }\r\n\r\nexport const UserHeader: FC<Props> = () => {\r\n    const dispatch = useAppDispatch()\r\n    return (\r\n        <Header className={classes.header}>\r\n            <div className={classes['header__wrapper']}>\r\n                <Link to=\"/\" className={classes['header__text']}>Notes</Link>\r\n                <Input.Search\r\n                    placeholder=\"Enter search text\"\r\n                    className={classes['header__search']}\r\n                    onSearch={(value) => dispatch(changeValue(value))}\r\n                    allowClear\r\n                />\r\n            </div>\r\n        </Header>\r\n    )\r\n}\r\n","import React, { FC, useEffect } from 'react';\n//import { Counter } from './features/counter/Counter'\nimport Layout from './components/Layout'\n//import Menu from './components/Menu'\n//import Input from './components/Input'\n//import Button from './components/Button'\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n//import { FormOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport classes from './styles.module.scss'\nimport { useAppDispatch } from './app/hooks'\nimport { addTaskAsync, loadTaskAsync } from './app/asyncActions'\nimport { BrowserRouter, Switch, Link, Route } from 'react-router-dom'\nimport AddTask from './features/AddTask'\nimport TaskContent from './features/TaskContent'\nimport UserSider from './features/UserSider'\nimport UpdateTask from './features/UpdateTask'\nimport { UserHeader } from './features/UserHeader'\nconst {/* Header,*/ Content, /*Footer, Sider*/ } = Layout;\n\nconst App: FC = () => {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(loadTaskAsync())\n  }, [])\n  //const todoToAdd = { id: 4, name: 'falses', description: 'aasdass' };\n  return (\n    <BrowserRouter>\n      <Layout className={classes.container}>\n        <UserHeader />\n        <Layout>\n          <UserSider />\n          <Content>\n            <Switch>\n              <Route path={['/', '/create-task']} component={AddTask} exact />\n              <Route path=\"/task/:id/edit-task\" component={UpdateTask} exact />\n              <Route path=\"/task/:id\" component={TaskContent} exact />\n            </Switch>\n          </Content>\n        </Layout>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n{/* <Layout>\n      <Sider\n        breakpoint=\"lg\"\n        collapsedWidth=\"0\"\n        onBreakpoint={(broken: any) => {\n          console.log(broken);\n        }}\n        onCollapse={(collapsed: any, type: any) => {\n          console.log(collapsed, type);\n        }}\n      >\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n          <Menu.Item key=\"1\" icon={<FormOutlined />}>\n            nav 1\n        </Menu.Item>\n          <Menu.Item key=\"2\" icon={<FormOutlined />}>\n            nav 2\n        </Menu.Item>\n          <Menu.Item key=\"3\" icon={<FormOutlined />}>\n            nav 3\n        </Menu.Item>\n          <Menu.Item key=\"4\" icon={<FormOutlined />}>\n            nav 4\n        </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout>\n        <Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }}>\n          <span style={{ color: '#FFF' }}>Заголовок приложения\n          <Input />\n          </span>\n        </Header>\n        <Content style={{ margin: '24px 16px 0' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n            content\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n      </Layout>\n    </Layout> */}","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action  } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n//import logger from 'logger'\nimport appSliceReducer from './appSlice' \nimport headerSliceReducer from './headerSlice'\nimport { middleWare } from './midleware'\n\nexport const store = configureStore({\n  reducer: {\n   appSlice: appSliceReducer,\n   headerSlice: headerSliceReducer,\n   counter: counterReducer,\n  },\n  //middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middleWare),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-error\":\"styles_input-error__2VMa-\",\"form-header\":\"styles_form-header__3jcLJ\",\"form\":\"styles_form__35kpl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3B9XR\",\"header__wrapper\":\"styles_header__wrapper__OUoNp\",\"header__search\":\"styles_header__search__3h_99\",\"header__text\":\"styles_header__text__30OEa\"};"],"sourceRoot":""}